apiVersion: v1
kind: Namespace
metadata:
  name: school-management

---
# ConfigMap for Environment Variables
apiVersion: v1
kind: ConfigMap
metadata:
  name: school-config
  namespace: school-management
data:
  APP_NAME: "School Management System"
  APP_ENV: "production"
  DATABASE_TYPE: "postgresql"
  CORS_ORIGINS: "*"
  LOG_LEVEL: "INFO"
  STORAGE_PROVIDER: "minio"
  PAYMENT_GATEWAY: "midtrans"

---
# Secret for Sensitive Data
apiVersion: v1
kind: Secret
metadata:
  name: school-secrets
  namespace: school-management
type: Opaque
stringData:
  SECRET_KEY: "your-production-secret-key-change-this"
  JWT_SECRET_KEY: "your-production-jwt-secret-key-change-this"
  POSTGRES_URL: "postgresql://user:password@postgres:5432/school_db"
  REDIS_URL: "redis://redis:6379/0"
  MIDTRANS_SERVER_KEY: "your-midtrans-server-key"

---
# PostgreSQL StatefulSet
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: postgres
  namespace: school-management
spec:
  serviceName: postgres
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      containers:
      - name: postgres
        image: postgres:17-alpine
        ports:
        - containerPort: 5432
          name: postgres
        env:
        - name: POSTGRES_DB
          value: school_management_db
        - name: POSTGRES_USER
          value: schooladmin
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: school-secrets
              key: POSTGRES_PASSWORD
        volumeMounts:
        - name: postgres-data
          mountPath: /var/lib/postgresql/data
  volumeClaimTemplates:
  - metadata:
      name: postgres-data
    spec:
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: 10Gi

---
# PostgreSQL Service
apiVersion: v1
kind: Service
metadata:
  name: postgres
  namespace: school-management
spec:
  ports:
  - port: 5432
    targetPort: 5432
  selector:
    app: postgres
  clusterIP: None

---
# Redis Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis
  namespace: school-management
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
    spec:
      containers:
      - name: redis
        image: redis:7-alpine
        ports:
        - containerPort: 6379
        volumeMounts:
        - name: redis-data
          mountPath: /data
      volumes:
      - name: redis-data
        emptyDir: {}

---
# Redis Service
apiVersion: v1
kind: Service
metadata:
  name: redis
  namespace: school-management
spec:
  ports:
  - port: 6379
    targetPort: 6379
  selector:
    app: redis

---
# Backend Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: backend
  namespace: school-management
spec:
  replicas: 3
  selector:
    matchLabels:
      app: backend
  template:
    metadata:
      labels:
        app: backend
    spec:
      containers:
      - name: backend
        image: your-registry/school-backend:latest
        ports:
        - containerPort: 8001
        envFrom:
        - configMapRef:
            name: school-config
        - secretRef:
            name: school-secrets
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /api/health
            port: 8001
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /api/ready
            port: 8001
          initialDelaySeconds: 10
          periodSeconds: 5

---
# Backend Service
apiVersion: v1
kind: Service
metadata:
  name: backend
  namespace: school-management
spec:
  type: ClusterIP
  ports:
  - port: 8001
    targetPort: 8001
  selector:
    app: backend

---
# Frontend Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: frontend
  namespace: school-management
spec:
  replicas: 2
  selector:
    matchLabels:
      app: frontend
  template:
    metadata:
      labels:
        app: frontend
    spec:
      containers:
      - name: frontend
        image: your-registry/school-frontend:latest
        ports:
        - containerPort: 3000
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "200m"

---
# Frontend Service
apiVersion: v1
kind: Service
metadata:
  name: frontend
  namespace: school-management
spec:
  type: ClusterIP
  ports:
  - port: 3000
    targetPort: 3000
  selector:
    app: frontend

---
# Ingress
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: school-ingress
  namespace: school-management
  annotations:
    kubernetes.io/ingress.class: nginx
    cert-manager.io/cluster-issuer: letsencrypt-prod
spec:
  tls:
  - hosts:
    - school.example.com
    secretName: school-tls
  rules:
  - host: school.example.com
    http:
      paths:
      - path: /api
        pathType: Prefix
        backend:
          service:
            name: backend
            port:
              number: 8001
      - path: /
        pathType: Prefix
        backend:
          service:
            name: frontend
            port:
              number: 3000